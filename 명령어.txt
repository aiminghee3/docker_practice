


docker ps 
- 실행중인 도커 컨테이너를 표시함

docer ps -a
- 도커가 생성한 모든 컨테이너, 프로세스가 표시됨

docker stop + 도커파일이름
- 실행중인 도커파일 중지

docker run -p 3000:3000 + 이미지 아이디
- 도커 이미지 컨테이너로 실행, 3000(내 마음대로->로컬에서 띄울 로컬번호):3000(도커파일에-expose 명시돼있는 포트번호)
- 이미지를 기반으로 새 컨테이너를 생성 후 실행함

docker build . 
- 현재 파일 도커 이미지 빌드

docker start + 도커아이디 or 도커이름
- 중지된 컨테이너 재실행


docker image prune -a
- 로컬에 있는 전체 도커이미지 제거

docker login
- 도커 허브에 이미지 푸시할 때 권한이 거부되면 로그인 하고 푸시하면됨

docker images
- 도커 이미지들 확인

docker build -t aiminghee3/node-complete .
- 도커 이미지 빌드, -t는 이미지에 태그를 지정하는 옵션, 
- aiminghee3/node-complete에서 aiminghee는 도커 허브에 있는 사용자 이름이고
- node-complete는 해당 이미지의 이름
- 즉 빌드된 이미지에 aiminghee3/node-complete 라는 태그를 붙이겠다는 의미임
- . 은 빌드 컨텍스트를 나타냄, 현재 위치에서 Dockerfile을 찾아서 이미지를 빌드함


docker run -p 3000:80 -d --name feedback-app --rm  feedback-node 
- -d는 컨테이너 실행할 때 터미널 사용할 수 있게 하는 명령어 : detach모드
- --name feedback-app 컨테이너의 이름을 정해줌
--rm 컨테이너 중단시킬 때 제거해줌
- feedback-node는 이미지 이름임

docker rmi
- 도커 이미지 제거하는 코드

docker volume ls
- 도커의 볼륨 리스트를 확인할 수 있음

docker volume rm 볼륨이름
- 특정 볼륨 제거

docker volume prune
- 사용하지 않는 전체 볼륨 제거

바인드 마운트
- 이는 간단하게 설명하자면 소스코드의 변경사항을 컨테이너에서 읽을 수 있게 하는 도구다
- 하지만 도커파일에 쓰는게 아니라 컨테이너를 실행할 때 명령어를 적어준다.
- 왜냐면 바인드 마운트는 이미지가 아니라 컨테이너랑 연관되었기 때문이다.
- 바인드 마운트가 왜 중요하나면 개발자 입장에서 개발을 할 때 실시간으로 소스코드의 변경을 확인하고 싶다.
- 하지만 바인드 마운트를 적용하지 못하면 개발자는 이를 위해 이미지를 재 빌드하고 컨테이너를 재 실행하는 수고를 해야한다.
- 그래서 바인드 마운트를 적용해서 소스코드의 변경을 바로 확인할 수 있게 하는 편리한 기능이다.

바인드 마운트 코드
docker run -d -p 3000:80 --rm --name feedback-app -v feedback:/app/feedback -v "/Users/jojunhui/Desktop/project/docker/docker-volume:/app" feedback-node:volumes
여기선 절대경로를 사용해야함 "/Users/jojunhui/Desktop/project/docker/docker-volume:/app"    
:전까지의 경로를 /app에 넣겠다.

http://host.docker.internal
- host.docker.internal은 도커의 명령어인데 컨테이너의 ip주소를 도커가 찾아서 할당해주는거임 


docker container inspect 컨테이너 이름
- 도커 컨테이너의 정보를 확인할 수 있음

docker network create 네트워크 이름 
- 도커 네트워크를 생성함

docker network ls 
- 도커의 네트워크 리스트 확인

 docker run -d --name mongodb(컨테이너 이름) --network test-net(네트워크 이름) mongo(도커 허브에 있는거)
- 도커 허브에 있는 이미지를 내 로컬로 원하는 이름으로 가져옴

'mongodb://mongodb:27017/swfavorites',
- db연결 주소인데, 컨테이너가 같은 네트워크 상에 있으면 'mongodb'처럼 연결하고 싶은 컨테이너의 이름을 입력하면됨

docker run --name favorites --network test-net(네트워크 이름) -d --rm -p 3000:3000 favorite-node
- 같은 네트워크상에 있는 다른 컨테이너와 연결할 수 있게 컨테이너를 실행하는 코드

docker logs [옵션] [컨테이너 이름 또는 ID]

docker build --platform linux/amd64 -t algorithm-server . 
- 배포할 때 다양한 플랫폼 지원하게 해야함

--add-host=host.docker.internal:host-gateway 
리눅스 서버에선 맥이랑 윈도우랑 달리 도커가 Mysql게이트를 찾지못해서 docker run 할 때 이 명령어 같이 써줘야함

docker-compose up -d
- 도커 컴포즈 파일에 명시된 모든 컨테이너가 생성됨

docker-compose down
- 컴포트 파일에 있는 모든 컨테이너가 삭제되고 생성된 디폴트 네트워크와 모든 것이 종료됨, 볼륨은 삭제되지 않음
d
docker-compose down -v
- 볼륨도 삭제하는 명령어 하지만 볼륨엔 데이터가 남아이썽서 일반적으로 사용하진 않음 

docker-compose up --build
- 도커 컴퐅크에 있는 이미지들을 강제 리빌드하여 실행할 수 있음 

docker exec -it(인터렉티브 모드) + 컨테이너 이름 + 명령어(ex : npm init)
컨테이너 말고 이미지에서 적용하려면 docker run도 가능
- 이 컨테이너가 실행하는 기본 명령 외에 실행 중인 컨테이너 내에서 특정 명령을 실행할 수 있음
- 따라서 Dockerfile에 지정되어 있는 명령 외에 입력된 특정 명령을 실행하게 됨?
- 따라서 어플리케이션은 실행 중인 상태에서 컨테이너에 명령을 내릴 수 있음 

Dockerfile에서 ENTRYPOINT -> ex : ENTRYPOINT ["npm"]
- 도커 run 같은 명령어에서 마지막 명령어의 baseurl같은 느낌 ex: docker run ~~~ + 컨테이너 이름 + 명령어(init이 => npm init이렇게 변함)

docker compose run, docker compose exec 나중에 쓰게되면 함 찾아보셈